# -*- coding: utf-8 -*-

# This file is part of IRIS: Infrastructure and Release Information System
#
# Copyright (C) 2013 Intel Corporation
#
# IRIS is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2.0 as published by the Free Software Foundation.

"""
This is an example configuration file for the IRIS project.

This file should reside in /etc/iris/iris.conf in production.

Settings in this file override default Django settings.
This is a pure Python code snippet run with execfile.
Execution is in the loading settings.py's context.
Please set user modes accordingly (0644 or stricter).
"""

from os import path
from logging import getLogger

# These are the common settings for the IRIS project.
# Please refer to Django documentation for available overrides:
#   https://docs.djangoproject.com/

DEBUG = False
TEMPLATE_DEBUG = DEBUG

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'exampledb',
        'USER': 'exampleuser',
        'PASSWORD': 'examplepassword',
        'HOST': '127.0.0.1',
        'PORT': '',
    }
}

ALLOWED_HOSTS = ['*']
TIME_ZONE = 'Europe/Helsinki'
LANGUAGE_CODE = 'en-us'

# UI_AVAILABLE and REST_API_AVAILABLE are flags for the IRIS specifically.
# They control whether or not to expose web components to the client.
# Unsetting REST_API_AVAILABLE removes/allows REST API components from use:
#   - REST API URLs
#   - REST Framework web views
#   - Swagger API documentation
# Unsetting UI_AVAILABLE removes/allows web UI components:
#   - Basic CRUD URL actions
#   - Application web views and forms

UI_AVAILABLE = True
REST_API_AVAILABLE = True

# This is an example LDAP configuration for the IRIS project.
# Please refer to documentation for all the available parameters
#   http://pythonhosted.org/django-auth-ldap/

import ldap
import django_auth_ldap

# Use LDAP authentication and built-in authentication simultaneously.
AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
)

# LDAP backend debugging setup
if DEBUG:
    logger = getLogger('django_auth_ldap')
    logger.addHandler(logging.StreamHandler())
    logger.setLevel(logging.DEBUG)

# LDAP authentication and bind info
AUTH_LDAP_SERVER_URI = 'ldap://exampleurl:389'
AUTH_LDAP_BIND_PASSWORD = 'examplepassword'
AUTH_LDAP_BIND_DN = 'cn=examplebind,dc=exampleldap'

# LDAP backend user setup
AUTH_LDAP_USER_DN_TEMPLATE = 'cn=%(user)s,ou=users,dc=exampleldap'
AUTH_LDAP_AUTHORIZE_ALL_USERS = True
AUTH_LDAP_ALWAYS_UPDATE_USER = True
AUTH_LDAP_USER_ATTR_MAP = {
    'first_name': "givenName",
    'last_name': "displayName",
    'email': "mail",
}

# LDAP backend group setup
AUTH_LDAP_REQUIRE_GROUP = 'cn=active,ou=groups,dc=exampleldap'
AUTH_LDAP_GROUP_TYPE = MemberDNGroupType('member')
AUTH_LDAP_GROUP_SEARCH = LDAPSearch('cn=active,ou=groups,dc=exampleldap',
                                    ldap.SCOPE_SUBTREE)

# LDAP backend user flag setup
# NOTE: These groups MUST exist in the LDAP schema or auth will fail.
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    'is_active': 'cn=active,ou=groups,dc=exampleldap',
    'is_staff': 'cn=Administrators,ou=groups,dc=exampleldap',
    'is_superuser': 'cn=Administrator,ou=groups,dc=exampleldap',
}
